# -*- coding: utf-8 -*-
"""withoutgrd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wSbpHak7dFspd8Me0J81lA0xZZCJZhk7

# Importing the Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
from statsmodels.formula.api import ols     
from statsmodels.stats.anova import _get_covariance,anova_lm 

import matplotlib.pyplot as plt
# %matplotlib inline

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import os 
cwd = os.getcwd()
print(cwd)

pd.options.display.max_columns = None
pd.options.display.width=None
pd.options.display.float_format = '{:,.6}'.format

import warnings
warnings.filterwarnings("ignore")

"""#Modelling"""

df = pd.read_csv("Changed.csv")

df

# Defining Dependent and Independent variables 
x= df.iloc[: , :-1]
y = df.iloc[: , [25]]

# Train - Test Split 
from sklearn.model_selection import train_test_split 
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.3)

"""#Modelling Without Grid Search CV

##Logistic Regression
"""

# Logistic Regression Model 
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
logreg = LogisticRegression()
logreg.fit(x_train, y_train)

# Prediction 
y_pred = logreg.predict(x_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(x_test, y_test)))

# Confusion Matrix for test data

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)

# Confusion Matrix for train data
y_pred1 = logreg.predict(x_train) 
from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_train, y_pred1)
print(confusion_matrix)

# Computing Statistics for test Data 
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

# Computing Statistics for train Data 
from sklearn.metrics import classification_report
print(classification_report(y_train, y_pred1))

#Calculating ROC- AUC Value for test data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_test, logreg.predict_proba(x_test)[:,1])
auc

#Calculating ROC- AUC Value for train data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_train, logreg.predict_proba(x_train)[:,1])
auc

"""## Random Forest"""

# Random Forest Classifier Model 
from sklearn.ensemble import RandomForestRegressor
# Instantiate model with 1000 decision trees
rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)
# Train the model on training data
rf.fit(x_train, y_train)

# Prediction 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
y_pred = rf.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.values.reshape(len(y_test),1)),1))

# Confusion Matrix for test data
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred.round())
print(cm)
accuracy_score(y_test, y_pred.round())

# Confusion Matrix for train data
y_pred2 = rf.predict(x_train)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_train, y_pred2.round())
print(cm)
accuracy_score(y_train, y_pred2.round())

# Computing Statistics for test Data 
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred.round()))

# Computing Statistics for train Data 
from sklearn.metrics import classification_report
print(classification_report(y_train, y_pred2.round()))

"""## XG Boost """

#XGBoost Classifier Model 
from numpy import loadtxt
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
# fit model no training data
model = XGBClassifier()
model.fit(x_train, y_train)

# Predictions
y_pred = model.predict(x_test)
predictions = [round(value) for value in y_pred]

# Confusion Matrix for test data
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred.round())
print(cm)
accuracy_score(y_test, y_pred.round())

# Confusion Matrix for train data
y_pred2 = model.predict(x_train)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_train, y_pred2.round())
print(cm)
accuracy_score(y_train, y_pred2.round())

# Computing Statistics for test Data
from sklearn.metrics import classification_report
print(classification_report(y_train, y_pred2.round()))

# Computing Statistics for train Data 
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred.round()))

#Calculating ROC- AUC Value for test data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_test, model.predict_proba(x_test)[:,1])
auc

#Calculating ROC- AUC Value for train data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_train, model.predict_proba(x_train)[:,1])
auc

"""## KNN Classifier """

# KNN Classifier Model 
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(x_train, y_train)

# Prediction 

y_pred = classifier.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.values.reshape(len(y_test),1)),1))

# Confusion Matrix for test data
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

# Confusion Matrix for train data
y_pred2 = classifier.predict(x_train)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_train, y_pred2.round())
print(cm)
accuracy_score(y_train, y_pred2.round())

# Computing Statistics for test Data 
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred.round()))

# Computing Statistics for train Data 
from sklearn.metrics import classification_report
print(classification_report(y_train, y_pred2.round()))

#Calculating ROC- AUC Value for test data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_test, classifier.predict_proba(x_test)[:,1])
auc

#Calculating ROC- AUC Value for train data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_train, classifier.predict_proba(x_train)[:,1])
auc

"""## SVM"""

# SVM Classifier Model  
from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0, probability=True)
classifier.fit(x_train, y_train)

#Prediction
y_pred = classifier.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.values.reshape(len(y_test),1)),1))

# Confusion Matrix for test data
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

# Confusion Matrix for train data
y_pred2 = classifier.predict(x_train)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_train, y_pred2.round())
print(cm)
accuracy_score(y_train, y_pred2.round())

# Computing Statistics for test Data 
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred.round()))

# Computing Statistics for train Data 
from sklearn.metrics import classification_report
print(classification_report(y_train, y_pred2.round()))

#Calculating ROC- AUC Value for test data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_test, classifier.predict_proba(x_test)[:,1])
auc

#Calculating ROC- AUC Value for train data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_train, classifier.predict_proba(x_train)[:,1])
auc

"""## Naive Bayes"""

# Naive Bayes Classifier Model 
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(x_train, y_train)

#Prediction
y_pred = classifier.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.values.reshape(len(y_test),1)),1))

# Confusion Matrix for test data
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

# Confusion Matrix for train data
y_pred2 = classifier.predict(x_train)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_train, y_pred2.round())
print(cm)
accuracy_score(y_train, y_pred2.round())

# Computing Statistics for test Data 
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred.round()))

# Computing Statistics for train Data 
from sklearn.metrics import classification_report
print(classification_report(y_train, y_pred2.round()))

#Calculating ROC- AUC Value for test data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_test, classifier.predict_proba(x_test)[:,1])
auc

#Calculating ROC- AUC Value for train data 
from sklearn.metrics import roc_auc_score
auc=roc_auc_score(y_train, classifier.predict_proba(x_train)[:,1])
auc